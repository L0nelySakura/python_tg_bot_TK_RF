import aiohttp
import asyncio
from internal.config.config import GIGACHAT_AUTH, GIGACHAT_SCOPE, GIGACHAT_URL

_cached_token = None

SYSTEM_PROMPT = (
    "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –†–§."
    "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É –†–§. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§, "
    "–æ—Ç–≤–µ—á–∞–π: 'üõë –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§.\n"
    "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§, "
    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é /clear –∏ —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.'"
)


async def get_access_token(force_refresh: bool = False):
    global _cached_token
    if _cached_token and not force_refresh:
        return _cached_token

    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Authorization": f"Basic {GIGACHAT_AUTH}",
        "RqUID": "123e4567-e89b-12d3-a456-426614174000",
        "Content-Type": "application/x-www-form-urlencoded",
    }
    data = {"scope": GIGACHAT_SCOPE}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=data, ssl=False) as resp:
            result = await resp.json()
            _cached_token = result.get("access_token")
            return _cached_token


async def ask_gigachat(question: str, chat_history: list[dict]) -> str:
    print("[INFO] –°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")

    async def _send_request(token: str):
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]

        for msg in chat_history[-5:]:
            role = "user" if msg["role"] == "user" else "assistant"
            messages.append({"role": role, "content": msg["content"]})

        messages.append({"role": "user", "content": question})

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }

        async with aiohttp.ClientSession() as session:
            async with asyncio.timeout(15):
                async with session.post(f"{GIGACHAT_URL}/chat/completions", headers=headers, json={"model": "GigaChat", "messages": messages}, ssl=False) as resp:
                    if resp.status == 401:
                        return None
                    return await resp.json()

    token = await get_access_token()

    result = await _send_request(token)
    if result is None:
        token = await get_access_token(force_refresh=True)
        result = await _send_request(token)
    if not result:
        print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GigaChat!")
        return "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GigaChat."

    try:
        answer = result["choices"][0]["message"]["content"]
        print(f"[INFO] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat: {answer}")
    except (KeyError, IndexError):
        print("[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat!")
        return "üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat."

    is_valid = await _validate_answer(answer)
    print(f"[INFO] –í–µ—Ä–¥–∏–∫—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {is_valid}")
    if not is_valid:
        print("[INFO] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
        return ("üõë –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§.\n"
                "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é /clear –∏ —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")

    return answer


async def _validate_answer(answer: str) -> bool:
    validation_prompt = (
        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –†–§. "
        "–ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç', "
        "–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω –∫ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§:\n\n"
        f"{answer}"
    )

    token = await get_access_token()
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{GIGACHAT_URL}/chat/completions",
            headers=headers,
            json={"model": "GigaChat", "messages": [{"role": "user", "content": validation_prompt}]},
            ssl=False
        ) as resp:
            if resp.status != 200:
                return False
            data = await resp.json()

    try:
        result_text = data["choices"][0]["message"]["content"].lower()
        return "–¥–∞" in result_text
    except (KeyError, IndexError):
        return False